// @ts-nocheck
"use client";

// // Shadcn Imports
// import DataTable from "@/components/DataTable";

// // Redux Imports
// import { fetchExpense } from "@/store";
// import { useEffect } from "react";
// import { useDispatch, useSelector } from "react-redux";

// export default function Expense() {

//   const expense = useSelector((state: any) => state.expense.data)
//   console.log(expense)
//   const dispatch = useDispatch();

//   useEffect(() => {
//     dispatch(fetchExpense({}));
//   }, []);

//   const actionLists = ["create", "update", "delete"];

//   return (
//     <div className="w-full">
//       <TopHeader />
//       <h1>expense page</h1>
//       <DataTable actions={actionLists} />
//     </div>
//   );
// }

import React, { useEffect } from "react";
import TopHeader from "@/components/TopHeader";
import DataTable from "@/components/DataTable";
import AddForm from "./components/AddForm";
import { useDispatch, useSelector } from "react-redux";
import { fetchExpense } from "@/store";
import { Checkbox } from "@/components/ui/checkbox";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { Button } from "@/components/ui/button";
import { CaretSortIcon, DotsHorizontalIcon } from "@radix-ui/react-icons";
import { currencyFormatter, dateFormat } from "@/utils/helperfunction";
const page = () => {
  const dispatch = useDispatch();
  const expense = useSelector((state) => state.expense);
  const actionLists = ["create", "update", "delete"];
  useEffect(() => {
    dispatch(fetchExpense({}));
  }, []);
  const columns: ColumnDef<Payment>[] = [
    {
      id: "select",
      header: ({ table }) => (
        <Checkbox
          checked={
            table.getIsAllPageRowsSelected() ||
            (table.getIsSomePageRowsSelected() && "indeterminate")
          }
          onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}
          aria-label="Select all"
          className="border-slate-50"
        />
      ),
      cell: ({ row }) => (
        <Checkbox
          checked={row.getIsSelected()}
          onCheckedChange={(value) => row.toggleSelected(!!value)}
          aria-label="Select row"
        />
      ),
      enableSorting: false,
      enableHiding: false,
    },
    {
      accessorKey: "title",
      header: "Title",
      cell: ({ row }) => (
        <div className="capitalize">{row.getValue("title")}</div>
      ),
    },
    {
      accessorKey: "price",
      header: () => <div className="text-right">Price</div>,
      cell: ({ row }) => {
        const amount = parseFloat(row.getValue("price"));
        return (
          <div className="text-right font-medium">
            {currencyFormatter(amount)}
          </div>
        );
      },
    },
    {
      accessorKey: "description",
      header: "Description",
      cell: ({ row }) => (
        <div className="capitalize">{row.getValue("description")}</div>
      ),
    },
    {
      accessorKey: "createdAt",
      header: "Created At",
      cell: ({ row }) => (
        <div className="capitalize">{dateFormat(row.getValue("createdAt"))}</div>
      ),
    },
    {
      accessorKey: "updatedAt",
      header: "Updated At",
      cell: ({ row }) => (
        <div className="capitalize">{dateFormat(row.getValue("updatedAt"))}</div>
      ),
    },
   
    {
      id: "actions",
      enableHiding: false,
      cell: ({ row }) => {
        const payment = row.original;

        return (
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button variant="ghost" className="h-8 w-8 p-0 hover:text-black">
                <span className="sr-only">Open menu</span>
                <DotsHorizontalIcon className="h-4 w-4" />
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end">
              <DropdownMenuLabel>Actions</DropdownMenuLabel>
              <DropdownMenuItem
                onClick={() => navigator.clipboard.writeText(payment.id)}
              >
                Copy payment ID
              </DropdownMenuItem>
              <DropdownMenuSeparator />
              <DropdownMenuItem>View customer</DropdownMenuItem>
              <DropdownMenuItem>View payment details</DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
        );
      },
    },
  ];
  console.log("===== expense =====", expense);
  return (
    <div>
      <TopHeader />
      <DataTable
        actions={actionLists}
        addForm={<AddForm />}
        headerTitle="Add Expense"
        columns={columns}
        data={expense.data}
      />
    </div>
  );
};

export default page;
